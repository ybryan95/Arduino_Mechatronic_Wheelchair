/*
* @CodeName: Wheelchair Height Adjustment System (WHAS)
* @Project: Height Adjustable Multi-functional Wheelchiar
* @Author: Ryan Cho
* 
* @Description:
* WHAS is installed in a microcontroller of the height adjustment system. 
* Microcontroller is connected with five push buttons (level home, level 1, level 2, level 3, emergency stop), two motorcontrollers, and Power Disconnection Detector (PDD: Refer to circuit design) 
* PDD is connected to battery, which provides power to microcontroller
* The code is written in programming language C++.
* Demo Video: https://youtu.be/KZApqd5AMBQ
* 
* EEPROM(0), or the first EEPORM storage indicates vertical position of the wheelchair seat (ranges from 0 ~ 240, or 35cm ~ 45.5cm from ground)
* EEPROM(1), or the second EEPROM storage indicates whether the software is at Initial Operation Stage(IOS) (ranges from 0 ~ 1 : Run IOS ~ Ignore IOS)
* 	IOS serves to create safe distance between screw and gearbox. Screw rotates about the rod which results in height adjustment of the wheelchair (Refer to mechanical design)
* 	Before IOS, screw should be in contact (the lowest position along the rod) with the gearbox. 
* EEPROM(2), or the third EEPROM storage indicates whether a software should enter the maintenance_Mode(), program should enter maintenance_Mode() 
* when the wheelchair user presses emergency stop or when microcontroller detects battery disconnection with feedback from PDD (ranges from 0 ~ 1 : Does Not Enter ~ Enter)
* Note 11/10/2019: Power Disconection Detector algorithm excluded in this code
*/

//Import EEPROM library
#include <EEPROM.h>

//Set connection between Motor Controller (MC), Height-adjustment Pushbutton Circuit (HPC), Emergency Stop Pushbutton Circuit (ESPC). Set every state of pushbuttons to LOW
const int stepPin = 12; //Green Wire (MC)
const int dirPin = 11;  // Yellow Wire (MC)
const int enPin = 10; // Blue Wire (MC)
const int buttonh = 22; //Yellow Wire (HPC)
const int button1 = 24; //Green Wire (HPC)
const int button2 = 26; //Blue Wire (HPC)
const int button3 = 28; //Purple Wire (HPC)
const int buttone = 23; //Purple Wire (ESPC)
int buttonStatee = LOW; //LOW indicates corresponding button is not pressed"
int buttonStateh = LOW;
int buttonState1 = LOW;
int buttonState2 = LOW;
int buttonState3 = LOW;

//Declare variable to save the position (i.e. height) of the wheelchair
int pos;

//Method which Activate at IOS, raises wheelchair to safe distance for gearbox and screw
 void forward_Start(){
   digitalWrite(dirPin,LOW); 
  for(int x = 1; x < 501; x++) {
    digitalWrite(stepPin,HIGH); 
    delayMicroseconds(600); 
    digitalWrite(stepPin,LOW); 
    delayMicroseconds(600);
    }
 }
 
//Method which Activate at IOS, raises wheelchair to safe distance for gearbox and screw, smaller distance of travel than //forward_Start method
 void forward_StartSmall(){
    digitalWrite(dirPin,LOW);
    for(int x = 0; x < 200; x++) {
    digitalWrite(stepPin,HIGH); 
    delayMicroseconds(600); 
    digitalWrite(stepPin,LOW); 
    delayMicroseconds(600); 
  }
  delay(500);
 }

// Method used to rotate motors forward, this method detects if pos is greater than 240 to determine whether to change // the height of the wheelchair
void moveforward(){
  buttonStatee = LOW; buttonStateh = LOW; buttonState1 = LOW; buttonState2 = LOW; buttonState3 = LOW;

//If pos is greater than 240, do nothing and go to maindrive
   if(pos > 240){
              pos = 240;
              EEPROM.update(0, pos);
              maindrive();
            }
            
   digitalWrite(dirPin,LOW); 

        for(int x = 1; x < 501; x++) {
          buttonStatee = digitalRead(buttone);

	//every loop cycle, detect if estop is pressed, if so, update EEPROM(2) slot and go to maindriive
            if(buttonStatee == HIGH){
              delay(2000);
              Serial.println(pos + "Estop detected: LOADING... maintenance mode" );
              delay(2000);
              Serial.println("Last saved Value: " + pos);
              EEPROM.update(0, pos);
              EEPROM.update(2,1);
              maindrive();
            }

	//if estop is not pressed, and pos is greater than 240, go to main drive
            else if(buttonStatee == LOW){
                          if(x % 100 == 0){
                            pos++;
                              if(pos > 240){
                                pos = 240;
                                EEPROM.update(0, pos);
                                maindrive();
                              }
                          }
	          //if pos is not greater tan 240, wheelchair height is adjusted from the code below
                      digitalWrite(stepPin,HIGH); 
                      delayMicroseconds(600); 
                      digitalWrite(stepPin,LOW); 
                      delayMicroseconds(600);
            }
        }
    
}

// Method used to rotate motors backward, this method detects if pos is less than 0 to determine whether to change 
// the height of the wheelchair
void movebackward(){
   buttonStatee = LOW; buttonStateh = LOW; buttonState1 = LOW; buttonState2 = LOW; buttonState3 = LOW;
   digitalWrite(dirPin,HIGH); 

  for(int x = 1; x < 501; x++) { 
      buttonStatee = digitalRead(buttone);
	//every loop cycle, detect if estop is pressed, if so, update EEPROM(2) slot and go to maindriive
            if(buttonStatee == HIGH){
              delay(2000);
              Serial.println(pos + "Estop detected: LOADING... maintenance mode" );
              delay(2000);
              Serial.println("Last saved Value: " + pos);
              EEPROM.update(0, pos);
              EEPROM.update(2,1);
              maindrive();
            }
	//if estop is not pressed, and pos is less than 0, go to main drive
            else if(buttonStatee == LOW){
                    if(x % 100 == 0){
                          pos--;
                            if(pos < 0){
                            pos = 0;
                            EEPROM.update(0, pos);
                            maindrive();
                          }
                        }
   //if pos is not less than 0, wheelchair height is adjusted from the code below
                digitalWrite(stepPin,HIGH); 
                delayMicroseconds(600); 
                digitalWrite(stepPin,LOW); 
                delayMicroseconds(600);
            }
    }
  
//make sure pos does not go below 0
  if(pos < 0){
      pos = 0;
      EEPROM.update(0, pos);
      buttonStateh = LOW;
      maindrive();
    }
}

/*Used to lock the system when estop is pressed, when entering this stage, buttons are expected to be pressed in special * order to unlock the system (Refer to software flowchart). When unlocked, go oto maindrive method
*/ 
void maintenance_Mode(){
   Serial.println("Press any among buttonh ~ button3 to return to maindrive after loading... LOADING...");
   Serial.println("Or turn off device here to manually set wheelchair to lowest height ... LOADING");
   delay(1000);
   buttonStatee = LOW; buttonStateh = LOW; buttonState1 = LOW; buttonState2 = LOW; buttonState3 = LOW;
   delay(1000);
   Serial.println("READY for input");
    buttonStatee = LOW; buttonStateh = LOW; buttonState1 = LOW; buttonState2 = LOW; buttonState3 = LOW;
   while( buttonStateh == LOW && buttonState1 == LOW && buttonState2 == LOW && buttonState3 == LOW ){
         buttonState1 = digitalRead(button1); buttonState2 = digitalRead(button2);  buttonState3 = digitalRead(button3);
         buttonStateh = digitalRead(buttonh); 
         
              if(buttonStateh == HIGH || buttonState1 == HIGH || buttonState2 == HIGH || buttonState3 == HIGH){
                                Serial.println("Maintenance Canceled... Returning to maindrive... LOADING...");
                                EEPROM.update(2,0);
                                delay(500);
                                EEPROM.update(2,0);
                                delay(500);
                                buttonStatee = LOW; buttonStateh = LOW; buttonState1 = LOW; buttonState2 = LOW; buttonState3 = LOW;
                                delay(500);
                                Serial.println("Loading Complete... Press reset button on Arduino to go back to height adjustment system");
                                maindrive();
                }
                
        }
        
}

/*Microcontroller setup. When IOS will be set again, uncomment this section in the code below
* [EEPROM.write(0,0); // indicates position data]
* [EEPROM.write(1,0); // indicates initial operation was finished]
* [EEPROM.write(2,0); // indicates estop was pressed]
* and upload the code to microcontrooller. Then, comment out the section again and upload the code 
* to microcontroller once again to properly use the wheelchair according to the software flowchart provided
*/
void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  pinMode(stepPin,OUTPUT); 
  pinMode(dirPin,OUTPUT);
  pinMode(enPin,OUTPUT);
  digitalWrite(enPin,LOW);
  pinMode(buttonh, INPUT);
  pinMode(button1, INPUT);
  pinMode(button2, INPUT);
  pinMode(button3, INPUT);
  pinMode(buttone, INPUT);
  //EEPROM.write(0,0); // indicates position data
  //EEPROM.write(1,0); // indicates initial operation was finished
  //EEPROM.write(2,0); // indicates estop was pressed
}


/* Loop of microcntroller. (1) determine if system should enter maintenance mode
* (2) Read pos value from EEPORM
* (3) Determine if system should enter IOS
 */

void loop() {
     //if eeprom(2) is 1, go to maintenance mode
     if(EEPROM.read(2) == 1){
      maintenance_Mode();
     }
    
      pos = EEPROM.read(0);
      buttonStateh = digitalRead(buttonh);

      //IOS section of the flowchart
      if(EEPROM.read(1) != 1){
        Serial.println("Ready for Activation");
          if(buttonStateh == HIGH){   
              Serial.println("Initial Operation Activated. Wheelchair Ascending");
                  for(int i = 0; i < 7; i++){
                    Serial.println("1");
                    forward_Start(); 
                  }
                  for(int i = 0; i < 1; i++){
                    forward_StartSmall();
                  }       
              buttonStateh = LOW;
              Serial.println(pos);
              pos = 0;
            EEPROM.update(0, pos);
            EEPROM.update(1, 1);
          }
          else if(buttonStateh == LOW){
            
          }
          else{
            
          }
    }
    
//go to maindrive if (1) (2) (3) test have passed
    else if(EEPROM.read(1) == 1){
      Serial.println(pos);
      maindrive();
    }
}

/*Maindrive of WHAS. This function should determine if estop is pressed.
* Refer to software flowchart for behavioral of the code
* This function uses variables: current pos of wheelchair and button pressed by user
* to determine how the motors should move
*/
void maindrive(){
  if(EEPROM.read(2) == 1){
      maintenance_Mode();
     }
  Serial.println("<Maindrive> Select level");
  EEPROM.update(2,0);
  buttonState1 = digitalRead(button1);
  buttonState2 = digitalRead(button2);
  buttonState3 = digitalRead(button3);
  buttonStateh = digitalRead(buttonh);
  /*
   * If buttonh is high state/pressed
   */
    if(buttonStateh == HIGH){
        if(pos != 0){
          
          while(pos > 0){
                movebackward();
              }
           EEPROM.update(0, pos);
      }
      else if(pos == 0){
          maindrive();
      }  
  }

    else if(buttonState1 == HIGH){
       if(pos < 80){
            while(pos < 80){
              moveforward();
              }
            EEPROM.update(0, pos);
            }
      else if(pos > 80){
        while(pos > 80){        
                  movebackward();
            }
            EEPROM.update(0, pos);
      }
      else if(pos == 80){
          maindrive();
      }  
  }
  
  /*
   * If button2 is high state/presssed
   */
    else if(buttonState2 == HIGH){
       if(pos < 160){
            while(pos < 160){
                   moveforward();
            }
            EEPROM.update(0, pos);
        }
      else if(pos > 160){
        while(pos > 160){
                  movebackward();
                }
            EEPROM.update(0, pos);
      }
      else if(pos == 160){
          maindrive();
      }  
  }
  /*
   * If button3 is high state/pressed
   */
   else if(buttonState3 == HIGH){
        if(pos != 240){
          while(pos < 240){
                moveforward();
          }
          EEPROM.update(0, pos);
      }  
}


}